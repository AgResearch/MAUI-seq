# Copyright: CC BY-SA 4.0 - 2025 Benjamin J Perry
# Version: 1.0
# Maintainer: Benjamin J Perry
# Email: ben.perry@agresearch.co.nz

configfile: "config/pipeline_config.yaml"

import os
import pandas as pd

# wildcard_constraints:
#     samples=r"\w+"  # Note the 'r' prefix


# Global minimum read count for processing
min_reads = 25000

# Load configuration variables
LIBRARY = config["LIBRARY"]
GTDB = config["GTDB"]
GTDB_TAXONOMY = config["GTDB_TAXONOMY"]
SILVA = config["SILVA"]
HOSTS = config["HOSTS"]

seqkit_env = 'envs/seqkit-2.4.yaml'
pigz_env = 'envs/pigz-2.6.yaml'
kraken2_env = 'envs/kraken2-2.1.3.yaml'
taxpasta_env = 'envs/taxpasta-0.7.0.yaml'
cutadapt_env = 'envs/cutadapt-4.4.yaml'

onstart:
    print(f"Working directory: {os.getcwd()}")
    print("TOOLS: ")
    os.system('echo "  bash: $(which bash)"')
    os.system('echo "  PYTHON: $(which python)"')
    os.system('echo "  CONDA: $(which conda)"')
    os.system('echo "  SNAKEMAKE: $(which snakemake)"')
    print(f"Env TMPDIR = {os.environ.get('TMPDIR', '<n/a>')}")
    os.system('echo "  PYTHON VERSION: $(python --version)"')
    os.system('echo "  CONDA VERSION: $(conda --version)"')


rule all:
    input:
        expand('results/{library}/00_QC/seqkit.report.KDR.txt', library = LIBRARY),



rule get_barcodes:
    output:
        os.path.join("resources", f"{LIBRARY}.cutadapt.barcodes.fasta"),
    threads: 2
    params:
        library = lambda wildcards: config["LIBRARY"],
    shell:
        """

        module load gquery;
        gquery -t gbs_keyfile -b library -p "columns=factid,barcode;fasta;noheading" {params.library} > {output}

        """


checkpoint cutadapt:
    input:
        barcodes = os.path.join("resources", f"{LIBRARY}.cutadapt.barcodes.fasta")    
    output:
        demuxed = directory(f"results/{LIBRARY}/01_cutadapt"),
    conda:
        cutadapt_env
    benchmark:
        os.path.join("benchmarks", f"cutadapt.{LIBRARY}.txt"),
    threads: 32
    resources:
        mem_gb=24,
        time=240,
        partition="compute,hugemem",
    params:
        fastq_dir = lambda wildcards: config["LINKFARM"],
        library = lambda wildcards: config["LIBRARY"],
    shell:
        'mkdir -p {output.demuxed} && '
        'zcat {params.fastq_dir}/{params.library}*.gz | '
        'cutadapt '
        '-j {threads} '
        '--discard-untrimmed '
        '--no-indels '
        '-e 0 '
        '-g ^file:{input.barcodes} '
        r'-o "{output.demuxed}/{{name}}.fastq.gz" '
        '-'


def get_cutadapt_demux(wildcards, extension=".fastq.gz", library=LIBRARY):
    directory = checkpoints.cutadapt.get().output[0]
    files = [subpath(f, basename=True) for f in os.listdir(directory) if f.endswith(extension)]
    basenames = [f.replace(extension, '') for f in files]
    return expand(os.path.join("results", library, "01_cutadapt/{samples}.fastq.gz"), samples = basenames)


checkpoint report_seqkit_raw:
    priority: 1000
    input:
        get_cutadapt_demux,
    output:
        os.path.join('results', LIBRARY, '00_QC/seqkit.report.raw.txt')
    benchmark:
        os.path.join('benchmarks', LIBRARY, 'report_seqkit_raw.txt')
    conda:
        seqkit_env
    threads: 32
    resources:
        mem_gb = lambda wildcards, attempt: 4 + ((attempt - 1) * 4),
        time = lambda wildcards, attempt: 30 + ((attempt - 1) * 60),
        partition="compute,hugemem"
    shell:
        'seqkit stats -j {threads} -a {input} > {output} '


rule bbduk:
    input:
        reads = 'results/{library}/01_cutadapt/{samples}.fastq.gz',
    output:
        bbdukReads = 'results/{library}/01_readMasking/{samples}.bbduk.fastq.gz'
    log:
        os.path.join('results', '{library}', 'logs', 'bbduk', '{samples}.bbduk.log'),
    benchmark:
        os.path.join('results', '{library}', 'benchmarks', 'bbduk.{samples}.txt'),
    conda:
        'envs/bbmap-39.01.yaml'
    threads: 8
    resources:
        mem_gb = lambda wildcards, attempt: 2 + ((attempt - 1) * 4),
        time = lambda wildcards, attempt: 8 + ((attempt - 1) * 10),
        partition='compute,hugemem',
    shell:
        'bbduk.sh '
        'threads={threads} '
        'in={input.reads} '
        'entropy=0.3 '
        'entropywindow=50 '
        'trimpolygright=5 '
        'qtrim=r '
        'trimq=20 '
        'out={output.bbdukReads} '
        '2>&1 | tee {log}'


def get_seqkitKneaddata_passing_samples(wildcards, minReads=min_reads, lib=LIBRARY):
    file = checkpoints.report_seqkit_raw.get().output[0]
    qc_stats = pd.read_csv(file, delimiter = r"\s+")    
    qc_stats["num_seqs"] = qc_stats["num_seqs"].str.replace(",", "").astype(int)
    qc_passed = qc_stats.loc[qc_stats["num_seqs"].astype(int) > minReads]
    passed = qc_passed['file'].str.split("/").str[-1].str.split(".").str[0].tolist()
    return expand(os.path.join("results", lib, "02_kneaddata/{samples}.fastq.gz"), samples = passed)

